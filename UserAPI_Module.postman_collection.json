{
	"info": {
		"_postman_id": "1a7074c8-04b4-4b77-9b38-0ba3ffafe259",
		"name": "UserAPI_Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33186041",
		"_collection_link": "https://solar-firefly-972975.postman.co/workspace/solar-firefly-972975-Workspace~5ef877a4-81e2-4a03-a69e-9e247e206168/collection/32173035-1a7074c8-04b4-4b77-9b38-0ba3ffafe259?action=share&source=collection_link&creator=33186041"
	},
	"item": [
		{
			"name": "Unauthorized_CRUDoperation",
			"item": [
				{
					"name": "Request_withoutAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// //Testing Status Codes\r",
									"//Test for the response status code\r",
									"pm.test(\"Successful POST request\",  () => {\r",
									" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
									"});\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"    pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\" Bad request \");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate the Data Type\r",
									"\r",
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"        \r",
									"//  pm.expect(jsonData).to.be.an(\"object\");\r",
									"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
									"    \r",
									"// });\r",
									"// //Validate the Schema\r",
									"\r",
									"var schema_check={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userAddress\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"addressId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"plotNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"street\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipCode\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"addressId\",\r",
									"        \"plotNumber\",\r",
									"        \"street\",\r",
									"        \"state\",\r",
									"        \"country\",\r",
									"        \"zipCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_first_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_last_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_contact_number\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_email_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creation_time\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"last_mod_time\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userAddress\",\r",
									"    \"user_id\",\r",
									"    \"user_first_name\",\r",
									"    \"user_last_name\",\r",
									"    \"user_contact_number\",\r",
									"    \"user_email_id\",\r",
									"    \"creation_time\",\r",
									"    \"last_mod_time\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" pm.test(\"Validating Response Body with status 401\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal(401);\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\"userAddress\": {\r\n    \"plotNumber\": \"N-78\",\r\n    \"street\": \"Park Street\",\r\n    \"state\": \"GA\",\r\n    \"country\": \"USA\",\r\n    \"zipCode\": 34564\r\n  },\r\n   \"user_first_name\": \"TeamoneNishu\",\r\n  \"user_last_name\": \"Userapi\",\r\n  \"user_contact_number\": 5673450807,\r\n  \"user_email_id\": \"k9s17@gmail.com\",\r\n  \"creation_time\": \"2024-02-20T21:28:35.329Z\",\r\n  \"last_mod_time\": \"2024-02-20T21:28:35.329Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/createusers",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"createusers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_Users_WithoutAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// //Testing Status Codes\r",
									"//Test for the response status code\r",
									"pm.test(\"Successful GET request\",  () => {\r",
									" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
									"});\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"    pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\" Bad request \");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									"\r",
									"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate the Data Type\r",
									"\r",
									" var jsonDataType=pm.response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"        \r",
									"//  pm.expect(jsonData).to.be.an(\"object\");\r",
									"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
									"    \r",
									"// });\r",
									"// //Validate the Schema\r",
									"\r",
									"var schema_check={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userAddress\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"addressId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"plotNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"street\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipCode\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"addressId\",\r",
									"        \"plotNumber\",\r",
									"        \"street\",\r",
									"        \"state\",\r",
									"        \"country\",\r",
									"        \"zipCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_first_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_last_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_contact_number\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_email_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creation_time\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"last_mod_time\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userAddress\",\r",
									"    \"user_id\",\r",
									"    \"user_first_name\",\r",
									"    \"user_last_name\",\r",
									"    \"user_contact_number\",\r",
									"    \"user_email_id\",\r",
									"    \"creation_time\",\r",
									"    \"last_mod_time\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" pm.test(\"Validating Response Body with status 401\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal(401);\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_byUserID_WithoutAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// //Testing Status Codes\r",
									"//Test for the response status code\r",
									"pm.test(\"Successful GET request\",  () => {\r",
									" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
									"});\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"    pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\" Bad request \");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									"\r",
									"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate the Data Type\r",
									"\r",
									" var jsonDataType=pm.response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"        \r",
									"//  pm.expect(jsonData).to.be.an(\"object\");\r",
									"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
									"    \r",
									"// });\r",
									"// //Validate the Schema\r",
									"\r",
									"var schema_check={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userAddress\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"addressId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"plotNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"street\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipCode\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"addressId\",\r",
									"        \"plotNumber\",\r",
									"        \"street\",\r",
									"        \"state\",\r",
									"        \"country\",\r",
									"        \"zipCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_first_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_last_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_contact_number\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_email_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creation_time\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"last_mod_time\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userAddress\",\r",
									"    \"user_id\",\r",
									"    \"user_first_name\",\r",
									"    \"user_last_name\",\r",
									"    \"user_contact_number\",\r",
									"    \"user_email_id\",\r",
									"    \"creation_time\",\r",
									"    \"last_mod_time\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" pm.test(\"Validating Response Body with status 401\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal(401);\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/user/9959",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"user",
								"9959"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_byFirstName_WithoutAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// //Testing Status Codes\r",
									"//Test for the response status code\r",
									"pm.test(\"Successful GET request\",  () => {\r",
									" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
									"});\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"    pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\" Bad request \");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									"\r",
									"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate the Data Type\r",
									"\r",
									" var jsonDataType=pm.response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"        \r",
									"//  pm.expect(jsonData).to.be.an(\"object\");\r",
									"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
									"    \r",
									"// });\r",
									"// //Validate the Schema\r",
									"\r",
									"var schema_check={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userAddress\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"addressId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"plotNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"street\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipCode\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"addressId\",\r",
									"        \"plotNumber\",\r",
									"        \"street\",\r",
									"        \"state\",\r",
									"        \"country\",\r",
									"        \"zipCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_first_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_last_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_contact_number\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_email_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creation_time\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"last_mod_time\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userAddress\",\r",
									"    \"user_id\",\r",
									"    \"user_first_name\",\r",
									"    \"user_last_name\",\r",
									"    \"user_contact_number\",\r",
									"    \"user_email_id\",\r",
									"    \"creation_time\",\r",
									"    \"last_mod_time\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" pm.test(\"Validating Response Body with status 401\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal(401);\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/username/Team",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"username",
								"Team"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_WithoutAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// //Testing Status Codes\r",
									"//Test for the response status code\r",
									"pm.test(\"Successful PUT request\",  () => {\r",
									" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
									"});\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"    pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\" Bad request \");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									"\r",
									"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate the Data Type\r",
									"\r",
									" var jsonDataType=pm.response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"        \r",
									"//  pm.expect(jsonData).to.be.an(\"object\");\r",
									"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
									"    \r",
									"// });\r",
									"// //Validate the Schema\r",
									"\r",
									"var schema_check={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userAddress\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"addressId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"plotNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"street\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipCode\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"addressId\",\r",
									"        \"plotNumber\",\r",
									"        \"street\",\r",
									"        \"state\",\r",
									"        \"country\",\r",
									"        \"zipCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_first_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_last_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_contact_number\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_email_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creation_time\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"last_mod_time\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userAddress\",\r",
									"    \"user_id\",\r",
									"    \"user_first_name\",\r",
									"    \"user_last_name\",\r",
									"    \"user_contact_number\",\r",
									"    \"user_email_id\",\r",
									"    \"creation_time\",\r",
									"    \"last_mod_time\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" pm.test(\"Validating Response Body with status 401\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal(401);\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"userAddress\": {\r\n    \"plotNumber\": \"N-78\",\r\n    \"street\": \"Park Street\",\r\n    \"state\": \"GA\",\r\n    \"country\": \"USA\",\r\n    \"zipCode\": 34564\r\n  },\r\n   \"user_first_name\": \"TeamoneNishu\",\r\n  \"user_last_name\": \"Userapi\",\r\n  \"user_contact_number\": 5673459807,\r\n  \"user_email_id\": \"ks17@gmail.com\",\r\n  \"creation_time\": \"2024-02-20T21:28:35.329Z\",\r\n  \"last_mod_time\": \"2024-02-20T21:28:35.329Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/deleteuser/username/TeamoneNishu",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deleteuser",
								"username",
								"TeamoneNishu"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETEbyUserID_WithoutAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// //Testing Status Codes\r",
									"//Test for the response status code\r",
									"pm.test(\"Successful DELETE request\",  () => {\r",
									" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
									"});\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"    pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\" Bad request \");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									"\r",
									"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate the Data Type\r",
									"\r",
									" var jsonDataType=pm.response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"        \r",
									"//  pm.expect(jsonData).to.be.an(\"object\");\r",
									"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
									"    \r",
									"// });\r",
									"// //Validate the Schema\r",
									"\r",
									"var schema_check={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userAddress\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"addressId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"plotNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"street\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipCode\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"addressId\",\r",
									"        \"plotNumber\",\r",
									"        \"street\",\r",
									"        \"state\",\r",
									"        \"country\",\r",
									"        \"zipCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_first_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_last_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_contact_number\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_email_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creation_time\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"last_mod_time\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userAddress\",\r",
									"    \"user_id\",\r",
									"    \"user_first_name\",\r",
									"    \"user_last_name\",\r",
									"    \"user_contact_number\",\r",
									"    \"user_email_id\",\r",
									"    \"creation_time\",\r",
									"    \"last_mod_time\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" pm.test(\"Validating Response Body with status 401\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal(401);\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/deleteuser/10307",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deleteuser",
								"10307"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETEbyUserFirstname_WithoutAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// //Testing Status Codes\r",
									"//Test for the response status code\r",
									"pm.test(\"Successful DELETE request\",  () => {\r",
									" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
									"});\r",
									"\r",
									"//To check the status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if (pm.response.code === 201) {\r",
									"    pm.response.to.have.status(\"Created\");}\r",
									"    else if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 409) {\r",
									"     pm.response.to.have.status(\"Conflict\");}\r",
									"  else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\" Bad request \");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     else if (pm.response.code === 204) {\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"  } else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									"\r",
									"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Validate the Data Type\r",
									"\r",
									" var jsonDataType=pm.response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"        \r",
									"//  pm.expect(jsonData).to.be.an(\"object\");\r",
									"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
									"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
									"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
									"    \r",
									"// });\r",
									"// //Validate the Schema\r",
									"\r",
									"var schema_check={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userAddress\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"addressId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"plotNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"street\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipCode\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"addressId\",\r",
									"        \"plotNumber\",\r",
									"        \"street\",\r",
									"        \"state\",\r",
									"        \"country\",\r",
									"        \"zipCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_first_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_last_name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_contact_number\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user_email_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creation_time\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"last_mod_time\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userAddress\",\r",
									"    \"user_id\",\r",
									"    \"user_first_name\",\r",
									"    \"user_last_name\",\r",
									"    \"user_contact_number\",\r",
									"    \"user_email_id\",\r",
									"    \"creation_time\",\r",
									"    \"last_mod_time\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" pm.test(\"Validating Response Body with status 401\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.equal(401);\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/deleteuser/username/May",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deleteuser",
								"username",
								"May"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorized_CRUDoperations",
			"item": [
				{
					"name": "Chaining_PositiveCases",
					"item": [
						{
							"name": "Request_WithAuthorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful POST request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collect\", jsonData.user_id);\r",
											"//pm.environment.set(\"user_id_env\",jsonData.user_id);\r",
											"pm.collectionVariables.set(\"userFirstName_collect\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Validate the Data Type\r",
											"\r",
											" //var jsonDataType=pm.response.json();\r",
											"\r",
											"//Validate the Schema\r",
											"var jsonData1=pm.response.json();\r",
											"var schema_check={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    pm.expect(tv4.validate(jsonData1,schema_check)).to.be.true;\r",
											"});\r",
											"\r",
											"//\r",
											"\r",
											"//     pm.test(\"Test data type of the response\",() =>{\r",
											"        \r",
											"//  pm.expect(jsonData).to.be.an(\"object\");\r",
											"//    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    \r",
											"// });\r",
											"// //Validate the Schema\r",
											"\r",
											"// var schema_check={\r",
											"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"//   \"type\": \"object\",\r",
											"//   \"properties\": {\r",
											"//     \"userAddress\": {\r",
											"//       \"type\": \"object\",\r",
											"//       \"properties\": {\r",
											"//         \"addressId\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         },\r",
											"//         \"plotNumber\": {\r",
											"//           \"type\": [\"string\", \"null\"] \r",
											"//         },\r",
											"//         \"street\": {\r",
											"//           \"type\": [\"string\", \"null\"] \r",
											"//         },\r",
											"//         \"state\": {\r",
											"//           \"type\": [\"string\", \"null\"] \r",
											"//         },\r",
											"//         \"country\": {\r",
											"//           \"type\": [\"string\", \"null\"] \r",
											"//         },\r",
											"//         \"zipCode\": {\r",
											"//           \"type\": [\"string\", \"null\"] \r",
											"//         }\r",
											"//       },\r",
											"//       \"required\": [\r",
											"//         \"addressId\",\r",
											"//         \"plotNumber\",\r",
											"//         \"street\",\r",
											"//         \"state\",\r",
											"//         \"country\",\r",
											"//         \"zipCode\"\r",
											"//       ]\r",
											"//     },\r",
											"//     \"user_id\": {\r",
											"//       \"type\": \"integer\"\r",
											"//     },\r",
											"//     \"user_first_name\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"user_last_name\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"user_contact_number\": {\r",
											"//       \"type\": \"integer\"\r",
											"//     },\r",
											"//     \"user_email_id\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"creation_time\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"last_mod_time\": {\r",
											"//       \"type\": \"string\"\r",
											"//     }\r",
											"//   },\r",
											"//   \"required\": [\r",
											"//     \"userAddress\",\r",
											"//     \"user_id\",\r",
											"//     \"user_first_name\",\r",
											"//     \"user_last_name\",\r",
											"//     \"user_contact_number\",\r",
											"//     \"user_email_id\",\r",
											"//     \"creation_time\",\r",
											"//     \"last_mod_time\"\r",
											"//   ]\r",
											"// }\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
											"// });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=Math.random().toString(36).substring(2);\r",
											"//var random = Math.random().toString(36).replace(/[^a-z]/gi, '');\r",
											"// var user_email_id=\"Mia\"+random+\"@gmail.com\";\r",
											"// user_first_name=\"Nia\"+random+\"test\";\r",
											"// user_last_name=\"JKim\"+random+\"api\";\r",
											"var randomString;\r",
											"do {\r",
											"  randomString = Math.random().toString(36).substring(2);\r",
											"} while (!/^[a-zA-Z]+$/.test(randomString));\r",
											"\r",
											"pm.collectionVariables.set(\"email_envt\",\"Mia\"+random+\"@gmail.com\");\r",
											"pm.collectionVariables.set(\"firstName_envt\",\"Nia\"+randomString+\"test\");\r",
											"pm.collectionVariables.set(\"lastName_envt\"+randomString+\"wel\");\r",
											"pm.collectionVariables.set(\"contact_envt\", Math.floor(Math.random() * 10000000000));\r",
											"\r",
											"// console.log(\"email\",email_envt);\r",
											"// console.log(\"first\",firstName_envt);\r",
											"// console.log(\"last\",lastName_envt);\r",
											"// console.log(\"contact\",contact_envt);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"userAddress\": {\r\n    \"plotNumber\": \"k-45\",\r\n    \"street\": \"ghhj\",\r\n    \"state\": \"GA\",\r\n    \"country\": \"USA\",\r\n    \"zipCode\": 3456490\r\n  },\r\n   \"user_first_name\": \"{{firstName_envt}}\",\r\n  \"user_last_name\": \"{{lastName_envt}}\",\r\n  \"user_contact_number\":\"{{contact_envt}}\",\r\n  \"user_email_id\": \"{{email_envt}}\"\r\n\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/createusers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"createusers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Users_WithAuthorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful GET request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//validating Status Line\r",
											"pm.test(\"validating Status Line\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict for email id and contact already exists\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"//Testing Headers\r",
											"//Check that a response header is present\r",
											"pm.test( \"Content-Type header is application/json\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"}\r",
											");\r",
											"\r",
											"//Test for a response header having a particulr value:\r",
											"pm.test(\"Content-Type header is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"}\r",
											");\r",
											"// Testing Cookies\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"//Test for a particular cookie value\r",
											"// pm.test(\"Cookie language has value 1\",()=>{\r",
											"//     pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
											"// }\r",
											"\r",
											"// );\r",
											"\r",
											"//Testing response times\r",
											"//Test for the response time to be within a specified range\r",
											"pm.test(\"Response time is less than 300ms\", () =>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"  \r",
											"//Validate the Data Type\r",
											"//Validate the Data Type\r",
											" let jsonDataType=pm.response.json();\r",
											"pm.test(\"Validate Data Type of the response\",()=>{\r",
											"    pm.expect(jsonDataType).to.be.an(\"array\");\r",
											"    console.log(\"Respose array length...\",jsonDataType.length);\r",
											"    for(i=0;i<jsonDataType.length;i++){\r",
											"    pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"   pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"    if(jsonDataType[i].userAddress.plotNumber!==null){\r",
											"    pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\");\r",
											"    }\r",
											"    if(jsonDataType[i].userAddress.street!==null){\r",
											"        pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\");\r",
											"    }\r",
											"     if(jsonDataType[i].userAddress.state!==null){\r",
											"    pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");\r",
											"     }\r",
											"    if(jsonDataType[i].userAddress.country!==null){\r",
											"           pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\");\r",
											"    }\r",
											"    if(jsonDataType[i].userAddress.zipCode!==null){\r",
											"   pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");\r",
											"    }\r",
											"   pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"});\r",
											"//Validate the Schema\r",
											"var jsonData=pm.response.json();\r",
											"var schema_check={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userAddress\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"addressId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"plotNumber\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"street\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"state\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"country\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"zipCode\": {\r",
											"              \"type\": \"integer\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"addressId\",\r",
											"            \"plotNumber\",\r",
											"            \"street\",\r",
											"            \"state\",\r",
											"            \"country\",\r",
											"            \"zipCode\"\r",
											"          ]\r",
											"        },\r",
											"        \"user_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_first_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_last_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_contact_number\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_email_id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"creation_time\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"last_mod_time\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userAddress\",\r",
											"        \"user_id\",\r",
											"        \"user_first_name\",\r",
											"        \"user_last_name\",\r",
											"        \"user_contact_number\",\r",
											"        \"user_email_id\",\r",
											"        \"creation_time\",\r",
											"        \"last_mod_time\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
											"});\r",
											"//\r",
											"\r",
											"\r",
											"\r",
											"//  let jsonDataType=pm.response.json();\r",
											"// pm.test(\"Validate Data Type of the response\",()=>{\r",
											"//     //when multiple response bodies is there\r",
											"//     if(Array.isArray(jsonDataType)){\r",
											"//         console.log(\"Respose array length...\",jsonDataType.length);\r",
											"//     for(i=0;i<jsonDataType.length;i++){\r",
											"//     pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"    \r",
											"//    pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"\r",
											"\r",
											"//     pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\");\r",
											"//     if(jsonDataType[i].userAddress.street!==null){\r",
											"//     pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\");}\r",
											"    \r",
											"//     pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");\r",
											"//     if(jsonDataType[i].userAddress.country!==null){\r",
											"//     pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\");}\r",
											"   \r",
											"//    pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");\r",
											" \r",
											"//    pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"\r",
											"//     pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"//     }\r",
											"//     }\r",
											"//     else{\r",
											"//     pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"//     pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"//     pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"  \r",
											"//     pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");\r",
											"//     if(jsonDataType.userAddress.street!==null){\r",
											"//     pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");}\r",
											" \r",
											"//     pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");\r",
											"//     if(jsonDataType.userAddress.country!==null){\r",
											"//     pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");}\r",
											"\r",
											"//     pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"//     }\r",
											"// });\r",
											"\r",
											"// //Validate the Schema\r",
											"// //var jsonData=pm.response.json();\r",
											"// var schema_check_all={\r",
											"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"//   \"type\": \"array\",\r",
											"//   \"items\": [\r",
											"//     {\r",
											"//       \"type\": \"object\",\r",
											"//       \"properties\": {\r",
											"//         \"userAddress\": {\r",
											"//           \"type\": \"object\",\r",
											"//           \"properties\": {\r",
											"//             \"addressId\": {\r",
											"//               \"type\": \"integer\"\r",
											"//             },\r",
											"//             \"plotNumber\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"street\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"state\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"country\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"zipCode\": {\r",
											"//               \"type\": \"integer\"\r",
											"//             }\r",
											"//           },\r",
											"//           \"required\": [\r",
											"//             \"addressId\",\r",
											"//             \"plotNumber\",\r",
											"//             \"street\",\r",
											"//             \"state\",\r",
											"//             \"country\",\r",
											"//             \"zipCode\"\r",
											"//           ]\r",
											"//         },\r",
											"//         \"user_id\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         },\r",
											"//         \"user_first_name\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"user_last_name\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"user_contact_number\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         },\r",
											"//         \"user_email_id\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"creation_time\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"last_mod_time\": {\r",
											"//           \"type\": \"string\"\r",
											"//         }\r",
											"//       },\r",
											"//       \"required\": [\r",
											"//         \"userAddress\",\r",
											"//         \"user_id\",\r",
											"//         \"user_first_name\",\r",
											"//         \"user_last_name\",\r",
											"//         \"user_contact_number\",\r",
											"//         \"user_email_id\",\r",
											"//         \"creation_time\",\r",
											"//         \"last_mod_time\"\r",
											"//       ]\r",
											"//     }\r",
											"//   ]\r",
											"// }\r",
											"//  var schema_check_individual={\r",
											"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"//   \"type\": \"object\",\r",
											"//   \"properties\": {\r",
											"//     \"userAddress\": {\r",
											"//       \"type\": \"object\",\r",
											"//       \"properties\": {\r",
											"//         \"addressId\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         },\r",
											"//         \"plotNumber\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"street\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"state\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"country\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"zipCode\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         }\r",
											"//       },\r",
											"//       \"required\": [\r",
											"//         \"addressId\",\r",
											"//         \"plotNumber\",\r",
											"//         \"street\",\r",
											"//         \"state\",\r",
											"//         \"country\",\r",
											"//         \"zipCode\"\r",
											"//       ]\r",
											"//     },\r",
											"//     \"user_id\": {\r",
											"//       \"type\": \"integer\"\r",
											"//     },\r",
											"//     \"user_first_name\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"user_last_name\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"user_contact_number\": {\r",
											"//       \"type\": \"integer\"\r",
											"//     },\r",
											"//     \"user_email_id\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"creation_time\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"last_mod_time\": {\r",
											"//       \"type\": \"string\"\r",
											"//     }\r",
											"//   },\r",
											"//   \"required\": [\r",
											"//     \"userAddress\",\r",
											"//     \"user_id\",\r",
											"//     \"user_first_name\",\r",
											"//     \"user_last_name\",\r",
											"//     \"user_contact_number\",\r",
											"//     \"user_email_id\",\r",
											"//     \"creation_time\",\r",
											"//     \"last_mod_time\"\r",
											"//   ]\r",
											"// }\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     if(Array.isArray(jsonDataType))\r",
											"//     {\r",
											"//         pm.expect(tv4.validate(jsonDataType,schema_check_all)).to.be.true;\r",
											"//     }\r",
											"//     else{\r",
											"//             pm.expect(tv4.validate(jsonDataType,schema_check_individual)).to.be.true;\r",
											"//     }\r",
											"// });\r",
											"// const resData=JSON.parse(responseBody);\r",
											"// pm.test(\"Validate JSON fields value\", function () {\r",
											"//     //var jsonData = pm.response.json();\r",
											"//     console.log(\"User first name is: \",jsonDataType.user_first_name);\r",
											"//     pm.expect(resData.user_first_name).to.eql(pm.collectionVariables.get(\"userFirstName_collection\"));\r",
											"// });     \r",
											"\r",
											"//     const jsonData=pm.response.json();\r",
											"//     pm.test(\"Test data type of the response\",() =>{\r",
											"// pm.expect(jsonData).to.be.an(\"object\");\r",
											"// pm.expect(jsonData.assressId).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"integert\");\r",
											"// pm.expect(jsonData.user_Id).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.creation_time).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.last_mode_time).to.be.an(\"string\");\r",
											"//     }\r",
											"//     );\r",
											"\r",
											"// //Validating JSON fields in Response\r",
											"// pm.test(\"value of user first name field is TeamoneNishu\",()=>{\r",
											"// var jsonData=pm.response.json();\r",
											"\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"N-78\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"Park-Street\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"GA\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"USA\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"34564\");\r",
											"\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"TeamoneNishu\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"Userapi\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"5673459807\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"ks17@gmail.com\");\r",
											"// }\r",
											"    \r",
											"// );\r",
											"\r",
											"// //Validating JSON Schema\r",
											"// //Response\r",
											"// //\r",
											"\r",
											"// //\r",
											"\r",
											"// //JSON Schema\r",
											"// //var schema=\r",
											"\r",
											"// //JSON schema Validation\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     pm.expect(tv4.validate(resData,schema)).to.be.true;\r",
											"// }\r",
											"// );\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_byUserId_WithAuthorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"\r",
											"//Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful GET request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([200,201,202,203,204,404,503])   ;\r",
											"});\r",
											"\r",
											"//\r",
											"\r",
											"//Check the status code text:\r",
											"// pm.test(\"Status code name has string\",()=>{\r",
											"//  pm.response.to.have.status(\"Created\");\r",
											"\r",
											"// });\r",
											"//\r",
											"pm.test(\" Status line is showing\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict for email id and contact already exists\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"//Testing Headers\r",
											"//Check that a response header is present\r",
											"pm.test( \"Content-Type header is application/json\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"}\r",
											");\r",
											"\r",
											"//Test for a response header having a particulr value:\r",
											"pm.test(\"Content-Type header is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"}\r",
											");\r",
											"// Testing Cookies\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"//Test for a particular cookie value\r",
											"// pm.test(\"Cookie language has value 1\",()=>{\r",
											"//     pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
											"// }\r",
											"\r",
											"// );\r",
											"//Testing response times\r",
											"//Test for the response time to be within a specified range\r",
											"pm.test(\"Response time is less than 200ms\", () =>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"  \r",
											"//Validate the Data Type\r",
											"// //Validate the Data Type\r",
											"//  const jsonDataType=pm.response.json();\r",
											"// pm.test(\"Validate Data Type of the response\",()=>{\r",
											"//     pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"//     pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"//     pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"// });\r",
											"\r",
											" let jsonDataType=pm.response.json();\r",
											"pm.test(\"Validate Data Type of the response\",()=>{\r",
											"    //when multiple response bodies is there\r",
											"    if(Array.isArray(jsonDataType)){\r",
											"        console.log(\"Respose array length...\",jsonDataType.length);\r",
											"    for(i=0;i<jsonDataType.length;i++){\r",
											"    pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"   pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"    if(jsonDataType[i].userAddress.plotNumber!==null){\r",
											"    pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\"); }\r",
											"     if(jsonDataType[i].userAddress.street!==null){\r",
											"    pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\"); }\r",
											"     if(jsonDataType[i].userAddress.state!==null){\r",
											"    pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");}\r",
											"     if(jsonDataType[i].userAddress.country!==null){\r",
											"    pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\"); }\r",
											"     if(jsonDataType[i].userAddress.zipCode!==null){\r",
											"   pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");}\r",
											"   pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"    }\r",
											"    else{\r",
											"    pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"    if(jsonDataType.userAddress.plotNumber!==null){\r",
											"    pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");}\r",
											"    if(jsonDataType.userAddress.street!==null){\r",
											"    pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");}\r",
											"    if(jsonDataType.userAddress.state!==null){\r",
											"    pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");}\r",
											"    if(jsonDataType.userAddress.country!==null){\r",
											"    pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");}\r",
											"    if(jsonDataType.userAddress.zipCode!==null){\r",
											"    pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");}\r",
											"    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"});\r",
											"\r",
											"//\r",
											"//var jsonData=pm.response.json();\r",
											"var schema_check={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    pm.expect(tv4.validate(jsonDataType,schema_check)).to.be.true;\r",
											"});\r",
											"\r",
											"// /////\r",
											"//  let jsonDataType=pm.response.json();\r",
											"// pm.test(\"Validate Data Type of the response\",()=>{\r",
											"//     //when multiple response bodies is there\r",
											"//     if(Array.isArray(jsonDataType)){\r",
											"//         console.log(\"Respose array length...\",jsonDataType.length);\r",
											"//     for(i=0;i<jsonDataType.length;i++){\r",
											"//     pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"    \r",
											"//    pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\");\r",
											"//    pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");\r",
											"//    pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"//     }\r",
											"//     }\r",
											"//     else{\r",
											"//     pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"//     pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"//     pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"//     pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"//     pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"//     }\r",
											"// });\r",
											"\r",
											"// //Validate the Schema\r",
											"// //var jsonData=pm.response.json();\r",
											"// var schema_check_all={\r",
											"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"//   \"type\": \"array\",\r",
											"//   \"items\": [\r",
											"//     {\r",
											"//       \"type\": \"object\",\r",
											"//       \"properties\": {\r",
											"//         \"userAddress\": {\r",
											"//           \"type\": \"object\",\r",
											"//           \"properties\": {\r",
											"//             \"addressId\": {\r",
											"//               \"type\": \"integer\"\r",
											"//             },\r",
											"//             \"plotNumber\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"street\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"state\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"country\": {\r",
											"//               \"type\": \"string\"\r",
											"//             },\r",
											"//             \"zipCode\": {\r",
											"//               \"type\": \"integer\"\r",
											"//             }\r",
											"//           },\r",
											"//           \"required\": [\r",
											"//             \"addressId\",\r",
											"//             \"plotNumber\",\r",
											"//             \"street\",\r",
											"//             \"state\",\r",
											"//             \"country\",\r",
											"//             \"zipCode\"\r",
											"//           ]\r",
											"//         },\r",
											"//         \"user_id\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         },\r",
											"//         \"user_first_name\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"user_last_name\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"user_contact_number\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         },\r",
											"//         \"user_email_id\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"creation_time\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"last_mod_time\": {\r",
											"//           \"type\": \"string\"\r",
											"//         }\r",
											"//       },\r",
											"//       \"required\": [\r",
											"//         \"userAddress\",\r",
											"//         \"user_id\",\r",
											"//         \"user_first_name\",\r",
											"//         \"user_last_name\",\r",
											"//         \"user_contact_number\",\r",
											"//         \"user_email_id\",\r",
											"//         \"creation_time\",\r",
											"//         \"last_mod_time\"\r",
											"//       ]\r",
											"//     }\r",
											"//   ]\r",
											"// }\r",
											"//  var schema_check_individual={\r",
											"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"//   \"type\": \"object\",\r",
											"//   \"properties\": {\r",
											"//     \"userAddress\": {\r",
											"//       \"type\": \"object\",\r",
											"//       \"properties\": {\r",
											"//         \"addressId\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         },\r",
											"//         \"plotNumber\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"street\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"state\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"country\": {\r",
											"//           \"type\": \"string\"\r",
											"//         },\r",
											"//         \"zipCode\": {\r",
											"//           \"type\": \"integer\"\r",
											"//         }\r",
											"//       },\r",
											"//       \"required\": [\r",
											"//         \"addressId\",\r",
											"//         \"plotNumber\",\r",
											"//         \"street\",\r",
											"//         \"state\",\r",
											"//         \"country\",\r",
											"//         \"zipCode\"\r",
											"//       ]\r",
											"//     },\r",
											"//     \"user_id\": {\r",
											"//       \"type\": \"integer\"\r",
											"//     },\r",
											"//     \"user_first_name\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"user_last_name\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"user_contact_number\": {\r",
											"//       \"type\": \"integer\"\r",
											"//     },\r",
											"//     \"user_email_id\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"creation_time\": {\r",
											"//       \"type\": \"string\"\r",
											"//     },\r",
											"//     \"last_mod_time\": {\r",
											"//       \"type\": \"string\"\r",
											"//     }\r",
											"//   },\r",
											"//   \"required\": [\r",
											"//     \"userAddress\",\r",
											"//     \"user_id\",\r",
											"//     \"user_first_name\",\r",
											"//     \"user_last_name\",\r",
											"//     \"user_contact_number\",\r",
											"//     \"user_email_id\",\r",
											"//     \"creation_time\",\r",
											"//     \"last_mod_time\"\r",
											"//   ]\r",
											"// }\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     if(Array.isArray(jsonDataType))\r",
											"//     {\r",
											"//         pm.expect(tv4.validate(jsonDataType,schema_check_all)).to.be.true;\r",
											"//     }\r",
											"//     else{\r",
											"//             pm.expect(tv4.validate(jsonDataType,schema_check_individual)).to.be.true;\r",
											"//     }\r",
											"// });\r",
											"// // const resData=JSON.parse(responseBody);\r",
											"// pm.test(\"Validate JSON fields value\", function () {\r",
											"//     //var jsonData = pm.response.json();\r",
											"//     console.log(\"User first name is: \",jsonDataType.user_first_name);\r",
											"//     pm.expect(resData.user_first_name).to.eql(pm.collectionVariables.get(\"userFirstName_collection\"));\r",
											"// });     \r",
											"\r",
											"//     const jsonData=pm.response.json();\r",
											"//     pm.test(\"Test data type of the response\",() =>{\r",
											"// pm.expect(jsonData).to.be.an(\"object\");\r",
											"// pm.expect(jsonData.assressId).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"integert\");\r",
											"// pm.expect(jsonData.user_Id).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.creation_time).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.last_mode_time).to.be.an(\"string\");\r",
											"//     }\r",
											"//     );\r",
											"\r",
											"// //Validating JSON fields in Response\r",
											"// pm.test(\"value of user first name field is TeamoneNishu\",()=>{\r",
											"// var jsonData=pm.response.json();\r",
											"\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"N-78\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"Park-Street\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"GA\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"USA\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"34564\");\r",
											"\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"TeamoneNishu\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"Userapi\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"5673459807\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"ks17@gmail.com\");\r",
											"// }\r",
											"    \r",
											"// );\r",
											"\r",
											"// //Validating JSON Schema\r",
											"// //Response\r",
											"// //\r",
											"\r",
											"// //\r",
											"\r",
											"// //JSON Schema\r",
											"// //var schema=\r",
											"\r",
											"// //JSON schema Validation\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     pm.expect(tv4.validate(resData,schema)).to.be.true;\r",
											"// }\r",
											"// );\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/user/{{user_id_collect}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"user",
										"{{user_id_collect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT_WithAuthorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful PUT request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
											"\r",
											"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Validate the Data Type\r",
											"\r",
											" var jsonDataType=pm.response.json();\r",
											"\r",
											"\r",
											"    pm.test(\"Test data type of the response\",() =>{\r",
											"        \r",
											" pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    \r",
											"});\r",
											"//Validate the Schema\r",
											"\r",
											"var schema_check={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userAddress\": {\r\n        \"addressId\": 10268,\r\n        \"plotNumber\": \"a-22\",\r\n        \"street\": \"Park Street\",\r\n        \"state\": \"GA\",\r\n        \"country\": \"USA\",\r\n        \"zipCode\": 34564\r\n    },\r\n    \"user_id\": 10281,\r\n    \"user_first_name\": \"TeamoneNishu\",\r\n    \"user_last_name\": \"{{lastname}}\",\r\n    \"user_contact_number\": 5673490598,\r\n    \"user_email_id\": \"ks1787@gmail.com\",\r\n    \"creation_time\": \"2024-02-24T18:15:23.522+00:00\",\r\n    \"last_mod_time\": \"2024-02-24T18:15:23.522+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/updateuser/{{user_id_collect}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"updateuser",
										"{{user_id_collect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_byFirstName_WithAuthorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful GET request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([200,201,404,,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//\r",
											"\r",
											"//Check the status code text:\r",
											"// pm.test(\"Status code name has string\",()=>{\r",
											"//  pm.response.to.have.status(\"Created\");\r",
											"\r",
											"// });\r",
											"//\r",
											"pm.test(\" handle post status code\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    if (pm.response.code === 404) {\r",
											"    pm.response.to.have.status(\"Not Found\");}\r",
											"    \r",
											"    \r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict for email id and contact already exists\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"//Testing Headers\r",
											"//Check that a response header is present\r",
											"pm.test( \"Content-Type header is application/json\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"}\r",
											");\r",
											"\r",
											"//Test for a response header having a particulr value:\r",
											"pm.test(\"Content-Type header is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"}\r",
											");\r",
											"// Testing Cookies\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"//Test for a particular cookie value\r",
											"// pm.test(\"Cookie language has value 1\",()=>{\r",
											"//     pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
											"// }\r",
											"\r",
											"// );\r",
											"//Testing response times\r",
											"//Test for the response time to be within a specified range\r",
											"pm.test(\"Response time is less than 200ms\", () =>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"  \r",
											"//Validate the Data Type\r",
											" let jsonDataType=pm.response.json();\r",
											"pm.test(\"Validate Data Type of the response\",()=>{\r",
											"    //when multiple response bodies is there\r",
											"    if(Array.isArray(jsonDataType)){\r",
											"        console.log(\"Respose array length...\",jsonDataType.length);\r",
											"    for(i=0;i<jsonDataType.length;i++){\r",
											"    pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"    \r",
											"   pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\");\r",
											"   pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");\r",
											"   pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"    }\r",
											"    else{\r",
											"    pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"});\r",
											"\r",
											"//Validate the Schema\r",
											"//var jsonData=pm.response.json();\r",
											"var schema_check_all={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userAddress\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"addressId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"plotNumber\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"street\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"state\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"country\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"zipCode\": {\r",
											"              \"type\": \"integer\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"addressId\",\r",
											"            \"plotNumber\",\r",
											"            \"street\",\r",
											"            \"state\",\r",
											"            \"country\",\r",
											"            \"zipCode\"\r",
											"          ]\r",
											"        },\r",
											"        \"user_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_first_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_last_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_contact_number\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_email_id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"creation_time\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"last_mod_time\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userAddress\",\r",
											"        \"user_id\",\r",
											"        \"user_first_name\",\r",
											"        \"user_last_name\",\r",
											"        \"user_contact_number\",\r",
											"        \"user_email_id\",\r",
											"        \"creation_time\",\r",
											"        \"last_mod_time\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											" var schema_check_individual={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    if(Array.isArray(jsonDataType))\r",
											"    {\r",
											"        pm.expect(tv4.validate(jsonDataType,schema_check_all)).to.be.true;\r",
											"    }\r",
											"    else{\r",
											"            pm.expect(tv4.validate(jsonDataType,schema_check_individual)).to.be.true;\r",
											"    }\r",
											"});\r",
											"// const resData=JSON.parse(responseBody);\r",
											"// pm.test(\"Validate JSON fields value\", function () {\r",
											"//     //var jsonData = pm.response.json();\r",
											"//     console.log(\"User first name is: \",jsonDataType.user_first_name);\r",
											"//     pm.expect(resData.user_first_name).to.eql(pm.collectionVariables.get(\"userFirstName_collection\"));\r",
											"// });     \r",
											"\r",
											"//     const jsonData=pm.response.json();\r",
											"//     pm.test(\"Test data type of the response\",() =>{\r",
											"// pm.expect(jsonData).to.be.an(\"object\");\r",
											"// pm.expect(jsonData.assressId).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"integert\");\r",
											"// pm.expect(jsonData.user_Id).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.creation_time).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.last_mode_time).to.be.an(\"string\");\r",
											"//     }\r",
											"//     );\r",
											"\r",
											"// //Validating JSON fields in Response\r",
											"// pm.test(\"value of user first name field is TeamoneNishu\",()=>{\r",
											"// var jsonData=pm.response.json();\r",
											"\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"N-78\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"Park-Street\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"GA\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"USA\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"34564\");\r",
											"\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"TeamoneNishu\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"Userapi\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"5673459807\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"ks17@gmail.com\");\r",
											"// }\r",
											"    \r",
											"// );\r",
											"\r",
											"// //Validating JSON Schema\r",
											"// //Response\r",
											"// //\r",
											"\r",
											"// //\r",
											"\r",
											"// //JSON Schema\r",
											"// //var schema=\r",
											"\r",
											"// //JSON schema Validation\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     pm.expect(tv4.validate(resData,schema)).to.be.true;\r",
											"// }\r",
											"// );\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/username/{{userFirstName_collect}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"username",
										"{{userFirstName_collect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETEbyUserID_WithAuthorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful DELETE request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
											"\r",
											"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"\r",
											"//Validate the Data Type\r",
											"\r",
											" var jsonDataType=pm.response.json();\r",
											"\r",
											"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
											"  if (pm.response.code === 200) {\r",
											"    pm.test(\"Response body is correct\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.message).to.equal(\"User is deleted successfully\");\r",
											"});\r",
											"  ;}\r",
											"    else if (pm.response.code === 404) {\r",
											"        pm.test(\"Validating response body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
											"    pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
											"});\r",
											"     ;}\r",
											"    \r",
											"   else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/deleteuser/{{user_id_collect}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"deleteuser",
										"{{user_id_collect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETEbyUserFirstname_WithAuthorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful DELETE request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
											"\r",
											"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"\r",
											"//Validate the Data Type\r",
											"\r",
											" var jsonDataType=pm.response.json();\r",
											"\r",
											"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
											"  if (pm.response.code === 200) {\r",
											"    pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.message).to.equal(\"User is deleted successfully\");\r",
											"});\r",
											"  ;}\r",
											"    else if (pm.response.code === 404) {\r",
											"        pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"     //pm.expect(responseJson.status).to.equal(404);\r",
											" \r",
											"    pm.expect(responseJson.message).to.contain(\"User does not exist with name\"); \r",
											"    //pm.expect(pm.response.json()).to.include({ \"error\": \"Not Found\" }); \r",
											"});\r",
											"     ;}\r",
											"    \r",
											"  \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/{{userFirstName_collect}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"{{userFirstName_collect}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NegativeCases_UserAPI",
					"item": [
						{
							"name": "NewUsers_NegativeCases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful POST request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"Ok\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\"Bad Request\");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
											"\r",
											"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Validate Response Body\r",
											"\r",
											" var jsonDataType=pm.response.json();\r",
											"\r",
											"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
											"  if (pm.response.code === 409) {\r",
											"    pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"409 CONFLICT\");\r",
											"    pm.expect(responseJson.message).to.contain(\"User already exist with same \");\r",
											"});\r",
											"  ;}\r",
											"    else if (pm.response.code === 400) {\r",
											"        pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"400 BAD_REQUEST\");\r",
											"    \r",
											"});\r",
											"     ;}\r",
											"    else if (pm.response.code === 400) {\r",
											"        pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(400);\r",
											"    \r",
											"});\r",
											"     ;}\r",
											"   else {\r",
											"  \r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"validating negative cases\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"userAddress\": {\r\n    \"plotNumber\": \"{{plotnumber}}\",\r\n    \"street\": \"{{street}}\",\r\n    \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n    \"zipCode\": \"{{zipcode}}\"\r\n  },\r\n   \"user_first_name\": \"{{firstname}}\",\r\n  \"user_last_name\": \"{{lastname}}\",\r\n  \"user_contact_number\": \"{{contactnumber}}\",\r\n  \"user_email_id\": \"{{emailid}}\"\r\n\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/createusers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"createusers"
									]
								}
							},
							"response": []
						},
						{
							"name": "AllUsers_negativeCases",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"//Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful GET request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(404);\r",
											"    \r",
											"});\r",
											"//\r",
											"\r",
											"//Check the status code text:\r",
											"// pm.test(\"Status code name has string\",()=>{\r",
											"//  pm.response.to.have.status(\"Created\");\r",
											"\r",
											"// });\r",
											"//\r",
											"pm.test(\" handle post status code\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict for email id and contact already exists\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"//Testing Headers\r",
											"//Check that a response header is present\r",
											"pm.test( \"Content-Type header is application/json\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"}\r",
											");\r",
											"\r",
											"//Test for a response header having a particulr value:\r",
											"pm.test(\"Content-Type header is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"}\r",
											");\r",
											"// Testing Cookies\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"//Test for a particular cookie value\r",
											"// pm.test(\"Cookie language has value 1\",()=>{\r",
											"//     pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
											"// }\r",
											"\r",
											"// );\r",
											"//Testing response times\r",
											"//Test for the response time to be within a specified range\r",
											"pm.test(\"Response time is less than 200ms\", () =>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"  \r",
											"//Validate the Data Type\r",
											" let jsonDataType=pm.response.json();\r",
											"pm.test(\"Validate Data Type of the response\",()=>{\r",
											"    //when multiple response bodies is there\r",
											"    if(Array.isArray(jsonDataType)){\r",
											"        console.log(\"Respose array length...\",jsonDataType.length);\r",
											"    for(i=0;i<jsonDataType.length;i++){\r",
											"    pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"    \r",
											"   pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\");\r",
											"   pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");\r",
											"   pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"    }\r",
											"    else{\r",
											"   // pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"});\r",
											"\r",
											"//Validate the Schema\r",
											"//var jsonData=pm.response.json();\r",
											"var schema_check_all={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userAddress\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"addressId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"plotNumber\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"street\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"state\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"country\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"zipCode\": {\r",
											"              \"type\": \"integer\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"addressId\",\r",
											"            \"plotNumber\",\r",
											"            \"street\",\r",
											"            \"state\",\r",
											"            \"country\",\r",
											"            \"zipCode\"\r",
											"          ]\r",
											"        },\r",
											"        \"user_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_first_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_last_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_contact_number\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_email_id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"creation_time\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"last_mod_time\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userAddress\",\r",
											"        \"user_id\",\r",
											"        \"user_first_name\",\r",
											"        \"user_last_name\",\r",
											"        \"user_contact_number\",\r",
											"        \"user_email_id\",\r",
											"        \"creation_time\",\r",
											"        \"last_mod_time\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											" var schema_check_individual={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    if(Array.isArray(jsonDataType))\r",
											"    {\r",
											"        pm.expect(tv4.validate(jsonDataType,schema_check_all)).to.be.true;\r",
											"    }\r",
											"    else{\r",
											"            pm.expect(tv4.validate(jsonDataType,schema_check_individual)).to.be.false;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Response Body with status 404\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(404);\r",
											"  \r",
											"});\r",
											"// const resData=JSON.parse(responseBody);\r",
											"// pm.test(\"Validate JSON fields value\", function () {\r",
											"//     //var jsonData = pm.response.json();\r",
											"//     console.log(\"User first name is: \",jsonDataType.user_first_name);\r",
											"//     pm.expect(resData.user_first_name).to.eql(pm.collectionVariables.get(\"userFirstName_collection\"));\r",
											"// });     \r",
											"\r",
											"//     const jsonData=pm.response.json();\r",
											"//     pm.test(\"Test data type of the response\",() =>{\r",
											"// pm.expect(jsonData).to.be.an(\"object\");\r",
											"// pm.expect(jsonData.assressId).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"integert\");\r",
											"// pm.expect(jsonData.user_Id).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.creation_time).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.last_mode_time).to.be.an(\"string\");\r",
											"//     }\r",
											"//     );\r",
											"\r",
											"// //Validating JSON fields in Response\r",
											"// pm.test(\"value of user first name field is TeamoneNishu\",()=>{\r",
											"// var jsonData=pm.response.json();\r",
											"\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"N-78\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"Park-Street\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"GA\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"USA\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"34564\");\r",
											"\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"TeamoneNishu\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"Userapi\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"5673459807\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"ks17@gmail.com\");\r",
											"// }\r",
											"    \r",
											"// );\r",
											"\r",
											"// //Validating JSON Schema\r",
											"// //Response\r",
											"// //\r",
											"\r",
											"// //\r",
											"\r",
											"// //JSON Schema\r",
											"// //var schema=\r",
											"\r",
											"// //JSON schema Validation\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     pm.expect(tv4.validate(resData,schema)).to.be.false;\r",
											"// }\r",
											"// );\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/urs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"urs"
									]
								}
							},
							"response": []
						},
						{
							"name": "username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"//Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful GET request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"// pm.test(\"Validating Response Body\", () => {\r",
											"//     const responseJson = pm.response.json();\r",
											"//     pm.expect(responseJson.status).to.equal(404);\r",
											"    \r",
											"// });\r",
											"//\r",
											"\r",
											"//Check the status code text:\r",
											"// pm.test(\"Status code name has string\",()=>{\r",
											"//  pm.response.to.have.status(\"Created\");\r",
											"\r",
											"// });\r",
											"//\r",
											"pm.test(\" handle post status code\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict for email id and contact already exists\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"//Testing Headers\r",
											"//Check that a response header is present\r",
											"pm.test( \"Content-Type header is application/json\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"}\r",
											");\r",
											"\r",
											"//Test for a response header having a particulr value:\r",
											"pm.test(\"Content-Type header is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"}\r",
											");\r",
											"// Testing Cookies\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"//Test for a particular cookie value\r",
											"// pm.test(\"Cookie language has value 1\",()=>{\r",
											"//     pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
											"// }\r",
											"\r",
											"// );\r",
											"//Testing response times\r",
											"//Test for the response time to be within a specified range\r",
											"pm.test(\"Response time is less than 200ms\", () =>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"  \r",
											"//Validate the Data Type\r",
											" let jsonDataType=pm.response.json();\r",
											"pm.test(\"Validate Data Type of the response\",()=>{\r",
											"    //when multiple response bodies is there\r",
											"    if(Array.isArray(jsonDataType)){\r",
											"        console.log(\"Respose array length...\",jsonDataType.length);\r",
											"    for(i=0;i<jsonDataType.length;i++){\r",
											"    pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"    \r",
											"   pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\");\r",
											"   pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");\r",
											"   pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"    }\r",
											"    else{\r",
											"    pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"});\r",
											"\r",
											"//Validate the Schema\r",
											"//var jsonData=pm.response.json();\r",
											"var schema_check_all={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userAddress\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"addressId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"plotNumber\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"street\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"state\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"country\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"zipCode\": {\r",
											"              \"type\": \"integer\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"addressId\",\r",
											"            \"plotNumber\",\r",
											"            \"street\",\r",
											"            \"state\",\r",
											"            \"country\",\r",
											"            \"zipCode\"\r",
											"          ]\r",
											"        },\r",
											"        \"user_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_first_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_last_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_contact_number\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_email_id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"creation_time\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"last_mod_time\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userAddress\",\r",
											"        \"user_id\",\r",
											"        \"user_first_name\",\r",
											"        \"user_last_name\",\r",
											"        \"user_contact_number\",\r",
											"        \"user_email_id\",\r",
											"        \"creation_time\",\r",
											"        \"last_mod_time\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											" var schema_check_individual={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    if(Array.isArray(jsonDataType))\r",
											"    {\r",
											"        pm.expect(tv4.validate(jsonDataType,schema_check_all)).to.be.true;\r",
											"    }\r",
											"    else{\r",
											"            pm.expect(tv4.validate(jsonDataType,schema_check_individual)).to.be.false;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validating Response Body with status 404\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"404 NOT_FOUND\");\r",
											"  \r",
											"});\r",
											"\r",
											"// const resData=JSON.parse(responseBody);\r",
											"// pm.test(\"Validate JSON fields value\", function () {\r",
											"//     //var jsonData = pm.response.json();\r",
											"//     console.log(\"User first name is: \",jsonDataType.user_first_name);\r",
											"//     pm.expect(resData.user_first_name).to.eql(pm.collectionVariables.get(\"userFirstName_collection\"));\r",
											"// });     \r",
											"\r",
											"//     const jsonData=pm.response.json();\r",
											"//     pm.test(\"Test data type of the response\",() =>{\r",
											"// pm.expect(jsonData).to.be.an(\"object\");\r",
											"// pm.expect(jsonData.assressId).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"integert\");\r",
											"// pm.expect(jsonData.user_Id).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.creation_time).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.last_mode_time).to.be.an(\"string\");\r",
											"//     }\r",
											"//     );\r",
											"\r",
											"// //Validating JSON fields in Response\r",
											"// pm.test(\"value of user first name field is TeamoneNishu\",()=>{\r",
											"// var jsonData=pm.response.json();\r",
											"\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"N-78\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"Park-Street\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"GA\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"USA\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"34564\");\r",
											"\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"TeamoneNishu\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"Userapi\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"5673459807\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"ks17@gmail.com\");\r",
											"// }\r",
											"    \r",
											"// );\r",
											"\r",
											"// //Validating JSON Schema\r",
											"// //Response\r",
											"// //\r",
											"\r",
											"// //\r",
											"\r",
											"// //JSON Schema\r",
											"// //var schema=\r",
											"\r",
											"// //JSON schema Validation\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     pm.expect(tv4.validate(resData,schema)).to.be.true;\r",
											"// }\r",
											"// );\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/username/hhy",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"username",
										"hhy"
									]
								}
							},
							"response": []
						},
						{
							"name": "userID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"//Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful GET request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"// pm.test(\"Validating Response Body\", () => {\r",
											"//     const responseJson = pm.response.json();\r",
											"//     pm.expect(responseJson.status).to.equal(404);\r",
											"    \r",
											"// });\r",
											"//\r",
											"\r",
											"//Check the status code text:\r",
											"// pm.test(\"Status code name has string\",()=>{\r",
											"//  pm.response.to.have.status(\"Created\");\r",
											"\r",
											"// });\r",
											"//\r",
											"pm.test(\" handle post status code\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict for email id and contact already exists\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"//Testing Headers\r",
											"//Check that a response header is present\r",
											"pm.test( \"Content-Type header is application/json\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"}\r",
											");\r",
											"\r",
											"//Test for a response header having a particulr value:\r",
											"pm.test(\"Content-Type header is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"}\r",
											");\r",
											"// Testing Cookies\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"//Test for a particular cookie value\r",
											"// pm.test(\"Cookie language has value 1\",()=>{\r",
											"//     pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
											"// }\r",
											"\r",
											"// );\r",
											"//Testing response times\r",
											"//Test for the response time to be within a specified range\r",
											"pm.test(\"Response time is less than 200ms\", () =>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"  \r",
											"//Validate the Data Type\r",
											" let jsonDataType=pm.response.json();\r",
											"pm.test(\"Validate Data Type of the response\",()=>{\r",
											"    //when multiple response bodies is there\r",
											"    if(Array.isArray(jsonDataType)){\r",
											"        console.log(\"Respose array length...\",jsonDataType.length);\r",
											"    for(i=0;i<jsonDataType.length;i++){\r",
											"    pm.expect(jsonDataType[i].userAddress).to.be.an(\"object\");\r",
											"    \r",
											"   pm.expect(jsonDataType[i].userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].userAddress.country).to.be.a(\"string\");\r",
											"   pm.expect(jsonDataType[i].userAddress.zipCode).to.be.a(\"number\");\r",
											"   pm.expect(jsonDataType[i].user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType[i].user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType[i].last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"    }\r",
											"    else{\r",
											"    pm.expect(jsonDataType).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress).to.be.an(\"object\");\r",
											"    pm.expect(jsonDataType.userAddress.addressId).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.userAddress.plotNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.street).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.state).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.country).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.userAddress.zipCode).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    }\r",
											"});\r",
											"\r",
											"//Validate the Schema\r",
											"//var jsonData=pm.response.json();\r",
											"var schema_check_all={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userAddress\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"addressId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"plotNumber\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"street\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"state\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"country\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"zipCode\": {\r",
											"              \"type\": \"integer\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"addressId\",\r",
											"            \"plotNumber\",\r",
											"            \"street\",\r",
											"            \"state\",\r",
											"            \"country\",\r",
											"            \"zipCode\"\r",
											"          ]\r",
											"        },\r",
											"        \"user_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_first_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_last_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"user_contact_number\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"user_email_id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"creation_time\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"last_mod_time\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userAddress\",\r",
											"        \"user_id\",\r",
											"        \"user_first_name\",\r",
											"        \"user_last_name\",\r",
											"        \"user_contact_number\",\r",
											"        \"user_email_id\",\r",
											"        \"creation_time\",\r",
											"        \"last_mod_time\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											" var schema_check_individual={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    if(Array.isArray(jsonDataType))\r",
											"    {\r",
											"        pm.expect(tv4.validate(jsonDataType,schema_check_all)).to.be.true;\r",
											"    }\r",
											"    else{\r",
											"            pm.expect(tv4.validate(jsonDataType,schema_check_individual)).to.be.false;\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validating Response Body with status 404\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"404 NOT_FOUND\");\r",
											"  \r",
											"});\r",
											"// const resData=JSON.parse(responseBody);\r",
											"// pm.test(\"Validate JSON fields value\", function () {\r",
											"//     //var jsonData = pm.response.json();\r",
											"//     console.log(\"User first name is: \",jsonDataType.user_first_name);\r",
											"//     pm.expect(resData.user_first_name).to.eql(pm.collectionVariables.get(\"userFirstName_collection\"));\r",
											"// });     \r",
											"\r",
											"//     const jsonData=pm.response.json();\r",
											"//     pm.test(\"Test data type of the response\",() =>{\r",
											"// pm.expect(jsonData).to.be.an(\"object\");\r",
											"// pm.expect(jsonData.assressId).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"integert\");\r",
											"// pm.expect(jsonData.user_Id).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"integer\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.creation_time).to.be.an(\"string\");\r",
											"// pm.expect(jsonData.last_mode_time).to.be.an(\"string\");\r",
											"//     }\r",
											"//     );\r",
											"\r",
											"// //Validating JSON fields in Response\r",
											"// pm.test(\"value of user first name field is TeamoneNishu\",()=>{\r",
											"// var jsonData=pm.response.json();\r",
											"\r",
											"// pm.expect(jsonData.plotNumber).to.be.an(\"N-78\");\r",
											"// pm.expect(jsonData.street).to.be.an(\"Park-Street\");\r",
											"// pm.expect(jsonData.state).to.be.an(\"GA\");\r",
											"// pm.expect(jsonData.country).to.be.an(\"USA\");\r",
											"// pm.expect(jsonData.zipCode).to.be.an(\"34564\");\r",
											"\r",
											"// pm.expect(jsonData.user_first_name).to.be.an(\"TeamoneNishu\");\r",
											"// pm.expect(jsonData.user_last_name).to.be.an(\"Userapi\");\r",
											"// pm.expect(jsonData.user_contact_number).to.be.an(\"5673459807\");\r",
											"// pm.expect(jsonData.user_email_id).to.be.an(\"ks17@gmail.com\");\r",
											"// }\r",
											"    \r",
											"// );\r",
											"\r",
											"// //Validating JSON Schema\r",
											"// //Response\r",
											"// //\r",
											"\r",
											"// //\r",
											"\r",
											"// //JSON Schema\r",
											"// //var schema=\r",
											"\r",
											"// //JSON schema Validation\r",
											"// pm.test(\"Schema is valid\",()=>{\r",
											"//     pm.expect(tv4.validate(resData,schema)).to.be.true;\r",
											"// }\r",
											"// );\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/user/102",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"user",
										"102"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateByUserID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Successful PUT request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
											"\r",
											"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Validate the Data Type\r",
											"\r",
											" var jsonDataType=pm.response.json();\r",
											"\r",
											"\r",
											"    pm.test(\"Test data type of the response\",() =>{\r",
											"        \r",
											" pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonDataType.user_id).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_first_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_last_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.user_contact_number).to.be.a(\"number\");\r",
											"    pm.expect(jsonDataType.user_email_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.creation_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonDataType.last_mod_time).to.be.a(\"string\");\r",
											"    \r",
											"});\r",
											"//Validate the Schema\r",
											"\r",
											"var schema_check={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userAddress\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"addressId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"plotNumber\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"street\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"state\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"country\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"zipCode\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"addressId\",\r",
											"        \"plotNumber\",\r",
											"        \"street\",\r",
											"        \"state\",\r",
											"        \"country\",\r",
											"        \"zipCode\"\r",
											"      ]\r",
											"    },\r",
											"    \"user_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"user_contact_number\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"user_email_id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creation_time\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_mod_time\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userAddress\",\r",
											"    \"user_id\",\r",
											"    \"user_first_name\",\r",
											"    \"user_last_name\",\r",
											"    \"user_contact_number\",\r",
											"    \"user_email_id\",\r",
											"    \"creation_time\",\r",
											"    \"last_mod_time\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Schema is valid\",()=>{\r",
											"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.false;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userAddress\": {\r\n        \"addressId\": 10268,\r\n        \"plotNumber\": \"a-22\",\r\n        \"street\": \"Park Street\",\r\n        \"state\": \"GA\",\r\n        \"country\": \"USA\",\r\n        \"zipCode\": 34564\r\n    },\r\n    \"user_id\": 10281,\r\n    \"user_first_name\": \"TeamoneNishu\",\r\n    \"user_last_name\": \"{{lastname}}\",\r\n    \"user_contact_number\": 5673490598,\r\n    \"user_email_id\": \"ks1787@gmail.com\",\r\n    \"creation_time\": \"2024-02-24T18:15:23.522+00:00\",\r\n    \"last_mod_time\": \"2024-02-24T18:15:23.522+00:00\"\r\n}\r\n\r\n// {\"userAddress\": {\r\n//     \"plotNumber\": \"{{plotnumber}}\",\r\n//     \"street\": \"{{street}}\",\r\n//     \"state\": \"{{state}}\",\r\n//     \"country\": \"{{country}}\",\r\n//     \"zipCode\": \"{{zipcode}}\"\r\n//   },\r\n//    \"user_first_name\": \"{{firstname}}\",\r\n//   \"user_last_name\": \"{{lastname}}\",\r\n//   \"user_contact_number\": \"{{contactnumber}}\",\r\n//   \"user_email_id\": \"{{emailid}}\"\r\n\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/user/10281",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"user",
										"10281"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteByUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"Validating DELETE request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
											"\r",
											"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"\r",
											"//Validate the Data Type\r",
											"\r",
											" var jsonDataType=pm.response.json();\r",
											"\r",
											"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
											"  if (pm.response.code === 200) {\r",
											"    pm.test(\"Response body is correct\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.message).to.equal(\"User is deleted successfully\");\r",
											"});\r",
											"  ;}\r",
											"    else if (pm.response.code === 404) {\r",
											"        pm.test(\"Validating response body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"404 NOT_FOUND\");\r",
											"    pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
											"});\r",
											"     ;}\r",
											"    \r",
											"   else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/deleteuser/10299",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"deleteuser",
										"10299"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //Testing Status Codes\r",
											"//Test for the response status code\r",
											"pm.test(\"validating DELETE request\",  () => {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404,409,401,400,200,201,202,203,204,503])   ;\r",
											"});\r",
											"\r",
											"//To check the status line\r",
											"pm.test(\" Status line is present\",  ()=> {\r",
											"  if (pm.response.code === 201) {\r",
											"    pm.response.to.have.status(\"Created\");}\r",
											"    else if (pm.response.code === 200) {\r",
											"     pm.response.to.have.status(\"OK\");}\r",
											"     else if (pm.response.code === 401) {\r",
											"     pm.response.to.have.status(\"Unauthorised\");}\r",
											"     else if (pm.response.code === 404) {\r",
											"     pm.response.to.have.status(\"Not Found\");}\r",
											"     else if (pm.response.code === 409) {\r",
											"     pm.response.to.have.status(\"Conflict\");}\r",
											"  else if (pm.response.code === 400) {\r",
											"     pm.response.to.have.status(\" Bad request \");}\r",
											"     else if (pm.response.code === 503) {\r",
											"     pm.response.to.have.status(\"Service Unavailable\");}\r",
											"     else if (pm.response.code === 204) {\r",
											"     pm.response.to.have.status(\"No Content\");\r",
											"  } else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData=JSON.parse(responseBody);\r",
											"pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
											"\r",
											"pm.collectionVariables.set(\"userFirstName_collection\",jsonData.user_first_name);\r",
											"\r",
											"//Validate time response\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"//Validate the header is present or not\r",
											"pm.test(\"Content-Type header is present\",() =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Validate the header value\r",
											"pm.test(\"Content-Type header value is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});\r",
											"\r",
											"//Test if a cookie is present in the response\r",
											"pm.test(\"Cookie JSESSIONID is present\",()=> {\r",
											"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"}\r",
											"\r",
											");\r",
											"\r",
											"//Validate the Data Type\r",
											"\r",
											" var jsonDataType=pm.response.json();\r",
											"\r",
											"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
											"  if (pm.response.code === 200) {\r",
											"    pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.message).to.equal(\"User is deleted successfully\");\r",
											"});\r",
											"  ;}\r",
											"    else if (pm.response.code === 404) {\r",
											"        pm.test(\"Validating Response Body\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"404 NOT_FOUND\");\r",
											"    pm.expect(responseJson.message).to.contain(\"User does not exist with name\"); \r",
											"});\r",
											"     ;}\r",
											"    \r",
											"   else {\r",
											"  \r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "userAPI",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Numpy@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/deleteuser/username/Team",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"deleteuser",
										"username",
										"Team"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "null"
		},
		{
			"key": "user_id_collection",
			"value": ""
		},
		{
			"key": "userFirstName_collection",
			"value": ""
		},
		{
			"key": "baseURL",
			"value": "https://userapi-8877aadaae71.herokuapp.com/uap"
		},
		{
			"key": "BaseURL",
			"value": "https://userapi-8877aadaae71.herokuapp.com/uap"
		},
		{
			"key": "email_env",
			"value": ""
		},
		{
			"key": "firstName_env",
			"value": ""
		},
		{
			"key": "lastName_env",
			"value": ""
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "email_envt",
			"value": ""
		},
		{
			"key": "firstName_envt",
			"value": ""
		},
		{
			"key": "lastName_envt",
			"value": ""
		},
		{
			"key": "contact_envt",
			"value": ""
		},
		{
			"key": "user_id_collect",
			"value": ""
		},
		{
			"key": "userFirstName_collect",
			"value": ""
		},
		{
			"key": "lastName_envtuwbriszbjnwel",
			"value": ""
		},
		{
			"key": "lastName_envtulshkdjkyswel",
			"value": ""
		},
		{
			"key": "lastName_envtcavyxrcygkawel",
			"value": ""
		},
		{
			"key": "lastName_envtpsashnqoopwel",
			"value": ""
		},
		{
			"key": "lastName_envtvqjswjtnduowel",
			"value": ""
		},
		{
			"key": "lastName_envtyvanhgkfaanwel",
			"value": ""
		},
		{
			"key": "lastName_envtorkzewclxjpwel",
			"value": ""
		},
		{
			"key": "lastName_envtuxdfygcrhswel",
			"value": ""
		},
		{
			"key": "lastName_envtqsytbdzcablwel",
			"value": ""
		},
		{
			"key": "lastName_envtuonguugtnowel",
			"value": ""
		},
		{
			"key": "lastName_envtjujbwcffawjwel",
			"value": ""
		},
		{
			"key": "lastName_envtnudbmhdeshnwel",
			"value": ""
		},
		{
			"key": "lastName_envtowuxuitoqcswel",
			"value": ""
		}
	]
}